[{"winner":"nobody","damage":{"left":0,"right":0},"state":{"left":{"army":{"0":"character_magic","1":"character_null","2":"character_null","3":"character_null"}},"right":{"army":{"0":"character_ork","1":"character_nekr","2":"character_null","3":"character_null"}}},"code":{"left":"// проверка юнита по ID\nif (is('EVAL')) {\n    // действие\n    say('Привет, я EVAL!')\n}","right":"// проверка юнита по ID\nif (is('$')) {\n    // действие\n    say('Привет, я $!')\n}// проверка юнита по ID\nif (is('PWA')) {\n    // действие\n    say('Привет, я PWA!')\n}"},"time":1534572288804},{"winner":"left","damage":{"left":500,"right":380},"state":{"left":{"army":{"0":"character_magic","1":"character_palladin","2":"character_winter","3":"character_varvar"},"name":"left_nick"},"right":{"army":{"0":"character_varvar","1":"character_nekr","2":"character_ork","3":"character_nekr"},"name":"right_player"}},"code":{"left":"\nif (is('EVAL')) {\n    goToEnemyAndHit('$')\n    goToEnemyAndHit('$')\n    goToEnemyAndHit('$')\n    \n    spell('pwa')\n    spell('pwa')\n    spell('pwa')\n}\n\nif (is('DART') || is('CSS')) {\n    ['css', '$', 'pwa'].forEach(id => {\n        for (let i = 0; i < 3; i++) {\n            goToEnemyAndHit(id)\n        }\n    })\n}\nif (is('IE')) {\n    spell('css')\n    spell('css')\n    spell('css')\n    spell('css')\n    spell('pwa')\n    spell('pwa')\n    spell('$')\n    spell('$')\n}","right":"unitsForShoot = ['ie', 'css', 'dart']\nunitsForMelee = ['ie', 'eval']\n\nif (isShooter()) {\n    unitsForShoot.forEach(id => {\n        goToEnemyAndHit(id)\n        shoot(id)\n        shoot(id)\n    })\n}\nif (isInfantry()) {\n    unitsForMelee.forEach(id => {\n        goToEnemyAndHit(id)\n        goToEnemyAndHit(id)\n    })\n}"},"time":1534696427742},{"winner":"right","damage":{"left":380,"right":430},"state":{"left":{"army":{"0":"character_nekr","1":"character_varvar","2":"character_palladin","3":"character_winter"},"name":"left_pkayer"},"right":{"army":{"0":"character_magic","1":"character_nekr","2":"character_varvar","3":"character_winter"}}},"code":{"left":"const enemyArmy = ['EVAL', 'PWA', 'CSS', 'IE']\n\nObjectKeys = (function () {\n    var hasOwnProperty = {}.hasOwnProperty,\n        hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),\n        dontEnums = [\n          'toString',\n          'toLocaleString',\n          'valueOf',\n          'hasOwnProperty',\n          'isPrototypeOf',\n          'propertyIsEnumerable',\n          'constructor'\n        ],\n        dontEnumsLength = dontEnums.length;\n \n    return function (obj) {\n      if (typeof obj !== 'object' && typeof obj !== 'function' || obj === null) throw new TypeError('Object.keys called on non-object');\n \n      var result = [];\n \n      for (var prop in obj) {\n        if (hasOwnProperty.call(obj, prop)) result.push(prop);\n      }\n \n      if (hasDontEnumBug) {\n        for (var i=0; i < dontEnumsLength; i++) {\n          if (hasOwnProperty.call(obj, dontEnums[i])) result.push(dontEnums[i]);\n        }\n      }\n      return result;\n    }\n  })()\n  \n  const randomWeightedChoice = (\n  table,\n  temperature = 50,             // in [0,100], 50 is neutral\n  randomFunction = Math.random,\n  influence = 2                 // seems fine, hard to tune\n) =>\n{\n  const T = (temperature - 50) / 50\n  const nb = table.length\n  if (!nb) { return null }\n\n  const total = table.reduce(\n    (previousTotal, element) => previousTotal + element.weight,\n    0\n  )\n\n  const avg = total / nb\n\n  // Compute amplified urgencies (depending on temperature)\n  const ur = {}\n  const urgencySum = table.reduce((previousSum, element) =>\n  {\n    const { id, weight } = element\n    let urgency = weight + T * influence * (avg - weight)\n    if (urgency < 0) urgency = 0\n    ur[id] = (ur[id] || 0) + urgency\n    return previousSum + urgency;\n  }, 0);\n\n  let currentUrgency = 0;\n  const cumulatedUrgencies = {}\n  ObjectKeys(ur).forEach(id => {\n    currentUrgency += ur[id]\n    cumulatedUrgencies[id] = currentUrgency\n  })\n\n  if (urgencySum < 1) return null; // No weight given\n  // Choose\n  const choice = randomFunction() * urgencySum\n  const ids = ObjectKeys(cumulatedUrgencies);\n  for(let i = 0; i < ids.length; i++) {\n    const id = ids[i];\n    const urgency = cumulatedUrgencies[id];\n    if(choice <= urgency) {\n      return id;\n    }\n  }\n};\n\n\n\n  \nconst filterByMyArmy = (map)=>{\n    const res = []\n    enemyArmy.forEach((enemy)=>{\n        res.push( { weight: 11 - map[enemy], id: enemy})\n    })\n    return res\n}\n\nconst isMage = ()=>is('EVAL')||is('IE')\n\nconst isShooter = ()=>is('PWA')||is('$')\n\nconst isMelee = ()=>!isMage() && !isShooter()\n\nconst meleeWeaknessMap = filterByMyArmy({\n    EVAL:2,\n    PWA:3,\n    $:3,\n    DART:6,\n    CSS:5,\n    IE:5,\n})\n\nconst shootWeaknessMap = filterByMyArmy({\n    EVAL:6,\n    PWA:8,\n    $:10,\n    DART:8,\n    CSS:4,\n    IE:2,\n})\n\nconst magicWeaknessMap = filterByMyArmy({\n    EVAL:10,\n    PWA:10,\n    $:2,\n    DART:2,\n    CSS:6,\n    IE:8,\n})\n\n\n\nfor(let i = 0; i < 80; i++){\n   if(isMage()) {\n       spell(randomWeightedChoice(magicWeaknessMap))\n    } else if(isShooter()){\n       shoot(randomWeightedChoice(shootWeaknessMap))\n    } else {\n       goToEnemyAndHit(randomWeightedChoice(meleeWeaknessMap))\n    }\n}","right":"const enemyArmy = ['DART', 'CSS', 'IE', 'PWA']\n\nObjectKeys = (function () {\n    var hasOwnProperty = {}.hasOwnProperty,\n        hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),\n        dontEnums = [\n          'toString',\n          'toLocaleString',\n          'valueOf',\n          'hasOwnProperty',\n          'isPrototypeOf',\n          'propertyIsEnumerable',\n          'constructor'\n        ],\n        dontEnumsLength = dontEnums.length;\n \n    return function (obj) {\n      if (typeof obj !== 'object' && typeof obj !== 'function' || obj === null) throw new TypeError('Object.keys called on non-object');\n \n      var result = [];\n \n      for (var prop in obj) {\n        if (hasOwnProperty.call(obj, prop)) result.push(prop);\n      }\n \n      if (hasDontEnumBug) {\n        for (var i=0; i < dontEnumsLength; i++) {\n          if (hasOwnProperty.call(obj, dontEnums[i])) result.push(dontEnums[i]);\n        }\n      }\n      return result;\n    }\n  })()\n  \n  const randomWeightedChoice = (\n  table,\n  temperature = 50,             // in [0,100], 50 is neutral\n  randomFunction = Math.random,\n  influence = 2                 // seems fine, hard to tune\n) =>\n{\n  const T = (temperature - 50) / 50\n  const nb = table.length\n  if (!nb) { return null }\n\n  const total = table.reduce(\n    (previousTotal, element) => previousTotal + element.weight,\n    0\n  )\n\n  const avg = total / nb\n\n  // Compute amplified urgencies (depending on temperature)\n  const ur = {}\n  const urgencySum = table.reduce((previousSum, element) =>\n  {\n    const { id, weight } = element\n    let urgency = weight + T * influence * (avg - weight)\n    if (urgency < 0) urgency = 0\n    ur[id] = (ur[id] || 0) + urgency\n    return previousSum + urgency;\n  }, 0);\n\n  let currentUrgency = 0;\n  const cumulatedUrgencies = {}\n  ObjectKeys(ur).forEach(id => {\n    currentUrgency += ur[id]\n    cumulatedUrgencies[id] = currentUrgency\n  })\n\n  if (urgencySum < 1) return null; // No weight given\n  // Choose\n  const choice = randomFunction() * urgencySum\n  const ids = ObjectKeys(cumulatedUrgencies);\n  for(let i = 0; i < ids.length; i++) {\n    const id = ids[i];\n    const urgency = cumulatedUrgencies[id];\n    if(choice <= urgency) {\n      return id;\n    }\n  }\n};\n\n\n\n  \nconst filterByMyArmy = (map)=>{\n    const res = []\n    enemyArmy.forEach((enemy)=>{\n        res.push( { weight: 11 - map[enemy], id: enemy})\n    })\n    return res\n}\n\nconst isMage = ()=>is('EVAL')||is('IE')\n\nconst isShooter = ()=>is('PWA')||is('$')\n\nconst isMelee = ()=>!isMage() && !isShooter()\n\nconst meleeWeaknessMap = filterByMyArmy({\n    EVAL:2,\n    PWA:3,\n    $:3,\n    DART:6,\n    CSS:5,\n    IE:5,\n})\n\nconst shootWeaknessMap = filterByMyArmy({\n    EVAL:6,\n    PWA:8,\n    $:10,\n    DART:8,\n    CSS:4,\n    IE:2,\n})\n\nconst magicWeaknessMap = filterByMyArmy({\n    EVAL:10,\n    PWA:10,\n    $:2,\n    DART:2,\n    CSS:6,\n    IE:8,\n})\n\n\n\nfor(let i = 0; i < 80; i++){\n   if(isMage()) {\n       spell(randomWeightedChoice(magicWeaknessMap))\n    } else if(isShooter()){\n       shoot(randomWeightedChoice(shootWeaknessMap))\n    } else {\n       goToEnemyAndHit(randomWeightedChoice(meleeWeaknessMap))\n    }\n}"},"time":1534696882951}]